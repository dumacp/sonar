// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: messages.proto

package messages

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Event_EventType int32

const (
	INPUT     Event_EventType = 0
	OUTPUT    Event_EventType = 1
	SCENE     Event_EventType = 2
	TAMPERING Event_EventType = 3
)

var Event_EventType_name = map[int32]string{
	0: "INPUT",
	1: "OUTPUT",
	2: "SCENE",
	3: "TAMPERING",
}

var Event_EventType_value = map[string]int32{
	"INPUT":     0,
	"OUTPUT":    1,
	"SCENE":     2,
	"TAMPERING": 3,
}

func (Event_EventType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4dc296cbfe5ffcd5, []int{0, 0}
}

type Event struct {
	Id    int32           `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Value int64           `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	Type  Event_EventType `protobuf:"varint,3,opt,name=type,proto3,enum=messages.Event_EventType" json:"type,omitempty"`
}

func (m *Event) Reset()      { *m = Event{} }
func (*Event) ProtoMessage() {}
func (*Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dc296cbfe5ffcd5, []int{0}
}
func (m *Event) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Event.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event.Merge(m, src)
}
func (m *Event) XXX_Size() int {
	return m.Size()
}
func (m *Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

func (m *Event) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Event) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *Event) GetType() Event_EventType {
	if m != nil {
		return m.Type
	}
	return INPUT
}

type Snapshot struct {
	Inputs     map[int32]int64 `protobuf:"bytes,1,rep,name=Inputs,proto3" json:"Inputs,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Outputs    map[int32]int64 `protobuf:"bytes,2,rep,name=Outputs,proto3" json:"Outputs,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	RawInputs  map[int32]int64 `protobuf:"bytes,3,rep,name=RawInputs,proto3" json:"RawInputs,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	RawOutputs map[int32]int64 `protobuf:"bytes,4,rep,name=RawOutputs,proto3" json:"RawOutputs,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *Snapshot) Reset()      { *m = Snapshot{} }
func (*Snapshot) ProtoMessage() {}
func (*Snapshot) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dc296cbfe5ffcd5, []int{1}
}
func (m *Snapshot) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Snapshot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Snapshot.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Snapshot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Snapshot.Merge(m, src)
}
func (m *Snapshot) XXX_Size() int {
	return m.Size()
}
func (m *Snapshot) XXX_DiscardUnknown() {
	xxx_messageInfo_Snapshot.DiscardUnknown(m)
}

var xxx_messageInfo_Snapshot proto.InternalMessageInfo

func (m *Snapshot) GetInputs() map[int32]int64 {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *Snapshot) GetOutputs() map[int32]int64 {
	if m != nil {
		return m.Outputs
	}
	return nil
}

func (m *Snapshot) GetRawInputs() map[int32]int64 {
	if m != nil {
		return m.RawInputs
	}
	return nil
}

func (m *Snapshot) GetRawOutputs() map[int32]int64 {
	if m != nil {
		return m.RawOutputs
	}
	return nil
}

type CountingActor struct {
	Address string `protobuf:"bytes,1,opt,name=Address,proto3" json:"Address,omitempty"`
	ID      string `protobuf:"bytes,2,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (m *CountingActor) Reset()      { *m = CountingActor{} }
func (*CountingActor) ProtoMessage() {}
func (*CountingActor) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dc296cbfe5ffcd5, []int{2}
}
func (m *CountingActor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CountingActor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CountingActor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CountingActor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CountingActor.Merge(m, src)
}
func (m *CountingActor) XXX_Size() int {
	return m.Size()
}
func (m *CountingActor) XXX_DiscardUnknown() {
	xxx_messageInfo_CountingActor.DiscardUnknown(m)
}

var xxx_messageInfo_CountingActor proto.InternalMessageInfo

func (m *CountingActor) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *CountingActor) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func init() {
	proto.RegisterEnum("messages.Event_EventType", Event_EventType_name, Event_EventType_value)
	proto.RegisterType((*Event)(nil), "messages.Event")
	proto.RegisterType((*Snapshot)(nil), "messages.Snapshot")
	proto.RegisterMapType((map[int32]int64)(nil), "messages.Snapshot.InputsEntry")
	proto.RegisterMapType((map[int32]int64)(nil), "messages.Snapshot.OutputsEntry")
	proto.RegisterMapType((map[int32]int64)(nil), "messages.Snapshot.RawInputsEntry")
	proto.RegisterMapType((map[int32]int64)(nil), "messages.Snapshot.RawOutputsEntry")
	proto.RegisterType((*CountingActor)(nil), "messages.CountingActor")
}

func init() { proto.RegisterFile("messages.proto", fileDescriptor_4dc296cbfe5ffcd5) }

var fileDescriptor_4dc296cbfe5ffcd5 = []byte{
	// 425 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0x3f, 0x6f, 0x9b, 0x40,
	0x18, 0x87, 0x39, 0x08, 0x4e, 0x78, 0xd3, 0x50, 0x74, 0xea, 0x40, 0x33, 0x5c, 0x29, 0x13, 0x4b,
	0x3d, 0xa4, 0x55, 0x55, 0x47, 0xa9, 0x2a, 0x27, 0x41, 0x15, 0x43, 0x9d, 0xe8, 0x42, 0x3e, 0x00,
	0x2d, 0xa7, 0xd4, 0x6a, 0x0b, 0x08, 0x8e, 0x58, 0x6c, 0xfd, 0x08, 0x9d, 0xfb, 0x09, 0xfa, 0x51,
	0x3a, 0x7a, 0xf4, 0x58, 0xe3, 0xa5, 0xa3, 0xa7, 0xce, 0x15, 0x07, 0xf8, 0x4f, 0xc4, 0xe2, 0x05,
	0xdd, 0x7b, 0xfa, 0x3d, 0xcf, 0xcb, 0xab, 0x17, 0x40, 0xff, 0xc6, 0xb2, 0x2c, 0xb8, 0x63, 0x59,
	0x3f, 0x49, 0x63, 0x1e, 0xe3, 0x83, 0xb6, 0xb6, 0x7f, 0x22, 0x50, 0xdd, 0x7b, 0x16, 0x71, 0xac,
	0x83, 0x3c, 0x0e, 0x4d, 0x64, 0x21, 0x47, 0xa5, 0xf2, 0x38, 0xc4, 0x4f, 0x40, 0xbd, 0x0f, 0xbe,
	0xe6, 0xcc, 0x94, 0x2d, 0xe4, 0x28, 0xb4, 0x2e, 0xf0, 0x0b, 0xd8, 0xe3, 0x45, 0xc2, 0x4c, 0xc5,
	0x42, 0x8e, 0x7e, 0xf2, 0xb4, 0xbf, 0x12, 0x0b, 0x49, 0xfd, 0xf4, 0x8b, 0x84, 0x51, 0x11, 0xb3,
	0xcf, 0x40, 0x5b, 0x5d, 0x61, 0x0d, 0x54, 0x6f, 0x74, 0x7d, 0xeb, 0x1b, 0x12, 0x06, 0xe8, 0x5d,
	0xdd, 0xfa, 0xd5, 0x19, 0x55, 0xd7, 0x37, 0x17, 0xee, 0xc8, 0x35, 0x64, 0x7c, 0x04, 0x9a, 0x3f,
	0xfc, 0x70, 0xed, 0x52, 0x6f, 0xf4, 0xde, 0x50, 0xec, 0x7f, 0x0a, 0x1c, 0xdc, 0x44, 0x41, 0x92,
	0x7d, 0x8e, 0x39, 0x7e, 0x0d, 0x3d, 0x2f, 0x4a, 0x72, 0x9e, 0x99, 0xc8, 0x52, 0x9c, 0xc3, 0x13,
	0xb2, 0xee, 0xdd, 0x66, 0xfa, 0x75, 0xc0, 0x8d, 0x78, 0x5a, 0xd0, 0x26, 0x8d, 0x07, 0xb0, 0x7f,
	0x95, 0x73, 0x01, 0xca, 0x02, 0x7c, 0xd6, 0x01, 0x36, 0x89, 0x9a, 0x6c, 0xf3, 0xf8, 0x1d, 0x68,
	0x34, 0x98, 0x34, 0x5d, 0x15, 0x01, 0x3f, 0xef, 0x80, 0x57, 0x99, 0x1a, 0x5f, 0x33, 0xf8, 0x1c,
	0x80, 0x06, 0x93, 0xb6, 0xfd, 0x9e, 0x30, 0xd8, 0xdd, 0x86, 0xad, 0x37, 0xd8, 0xa0, 0x8e, 0x07,
	0x70, 0xb8, 0x61, 0xc7, 0x06, 0x28, 0x5f, 0x58, 0xd1, 0xec, 0xa9, 0x3a, 0x76, 0x2f, 0xea, 0x54,
	0x7e, 0x83, 0x8e, 0x4f, 0xe1, 0xd1, 0xa6, 0x76, 0x27, 0xf6, 0x0c, 0xf4, 0xed, 0xb9, 0x76, 0xa2,
	0xdf, 0xc2, 0xe3, 0x07, 0x33, 0xed, 0x82, 0xdb, 0x03, 0x38, 0xba, 0x88, 0xf3, 0x88, 0x8f, 0xa3,
	0xbb, 0xe1, 0x27, 0x1e, 0xa7, 0xd8, 0x84, 0xfd, 0x61, 0x18, 0xa6, 0x2c, 0xcb, 0x84, 0x40, 0xa3,
	0x6d, 0x59, 0x7d, 0xb6, 0xde, 0xa5, 0x30, 0x68, 0x54, 0xf6, 0x2e, 0xcf, 0x5f, 0x4d, 0xe7, 0x44,
	0x9a, 0xcd, 0x89, 0xb4, 0x9c, 0x13, 0xf4, 0xbd, 0x24, 0xe8, 0x57, 0x49, 0xd0, 0xef, 0x92, 0xa0,
	0x69, 0x49, 0xd0, 0x9f, 0x92, 0xa0, 0xbf, 0x25, 0x91, 0x96, 0x25, 0x41, 0x3f, 0x16, 0x44, 0x9a,
	0x2e, 0x88, 0x34, 0x5b, 0x10, 0xe9, 0x63, 0x4f, 0xfc, 0x17, 0x2f, 0xff, 0x07, 0x00, 0x00, 0xff,
	0xff, 0xdf, 0x19, 0x62, 0x92, 0x29, 0x03, 0x00, 0x00,
}

func (x Event_EventType) String() string {
	s, ok := Event_EventType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Event) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Event)
	if !ok {
		that2, ok := that.(Event)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	return true
}
func (this *Snapshot) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Snapshot)
	if !ok {
		that2, ok := that.(Snapshot)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Inputs) != len(that1.Inputs) {
		return false
	}
	for i := range this.Inputs {
		if this.Inputs[i] != that1.Inputs[i] {
			return false
		}
	}
	if len(this.Outputs) != len(that1.Outputs) {
		return false
	}
	for i := range this.Outputs {
		if this.Outputs[i] != that1.Outputs[i] {
			return false
		}
	}
	if len(this.RawInputs) != len(that1.RawInputs) {
		return false
	}
	for i := range this.RawInputs {
		if this.RawInputs[i] != that1.RawInputs[i] {
			return false
		}
	}
	if len(this.RawOutputs) != len(that1.RawOutputs) {
		return false
	}
	for i := range this.RawOutputs {
		if this.RawOutputs[i] != that1.RawOutputs[i] {
			return false
		}
	}
	return true
}
func (this *CountingActor) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CountingActor)
	if !ok {
		that2, ok := that.(CountingActor)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	return true
}
func (this *Event) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&messages.Event{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Snapshot) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&messages.Snapshot{")
	keysForInputs := make([]int32, 0, len(this.Inputs))
	for k, _ := range this.Inputs {
		keysForInputs = append(keysForInputs, k)
	}
	github_com_gogo_protobuf_sortkeys.Int32s(keysForInputs)
	mapStringForInputs := "map[int32]int64{"
	for _, k := range keysForInputs {
		mapStringForInputs += fmt.Sprintf("%#v: %#v,", k, this.Inputs[k])
	}
	mapStringForInputs += "}"
	if this.Inputs != nil {
		s = append(s, "Inputs: "+mapStringForInputs+",\n")
	}
	keysForOutputs := make([]int32, 0, len(this.Outputs))
	for k, _ := range this.Outputs {
		keysForOutputs = append(keysForOutputs, k)
	}
	github_com_gogo_protobuf_sortkeys.Int32s(keysForOutputs)
	mapStringForOutputs := "map[int32]int64{"
	for _, k := range keysForOutputs {
		mapStringForOutputs += fmt.Sprintf("%#v: %#v,", k, this.Outputs[k])
	}
	mapStringForOutputs += "}"
	if this.Outputs != nil {
		s = append(s, "Outputs: "+mapStringForOutputs+",\n")
	}
	keysForRawInputs := make([]int32, 0, len(this.RawInputs))
	for k, _ := range this.RawInputs {
		keysForRawInputs = append(keysForRawInputs, k)
	}
	github_com_gogo_protobuf_sortkeys.Int32s(keysForRawInputs)
	mapStringForRawInputs := "map[int32]int64{"
	for _, k := range keysForRawInputs {
		mapStringForRawInputs += fmt.Sprintf("%#v: %#v,", k, this.RawInputs[k])
	}
	mapStringForRawInputs += "}"
	if this.RawInputs != nil {
		s = append(s, "RawInputs: "+mapStringForRawInputs+",\n")
	}
	keysForRawOutputs := make([]int32, 0, len(this.RawOutputs))
	for k, _ := range this.RawOutputs {
		keysForRawOutputs = append(keysForRawOutputs, k)
	}
	github_com_gogo_protobuf_sortkeys.Int32s(keysForRawOutputs)
	mapStringForRawOutputs := "map[int32]int64{"
	for _, k := range keysForRawOutputs {
		mapStringForRawOutputs += fmt.Sprintf("%#v: %#v,", k, this.RawOutputs[k])
	}
	mapStringForRawOutputs += "}"
	if this.RawOutputs != nil {
		s = append(s, "RawOutputs: "+mapStringForRawOutputs+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CountingActor) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&messages.CountingActor{")
	s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringMessages(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Event) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Event) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		i = encodeVarintMessages(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x18
	}
	if m.Value != 0 {
		i = encodeVarintMessages(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintMessages(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Snapshot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Snapshot) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Snapshot) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RawOutputs) > 0 {
		for k := range m.RawOutputs {
			v := m.RawOutputs[k]
			baseI := i
			i = encodeVarintMessages(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintMessages(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintMessages(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.RawInputs) > 0 {
		for k := range m.RawInputs {
			v := m.RawInputs[k]
			baseI := i
			i = encodeVarintMessages(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintMessages(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintMessages(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Outputs) > 0 {
		for k := range m.Outputs {
			v := m.Outputs[k]
			baseI := i
			i = encodeVarintMessages(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintMessages(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintMessages(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Inputs) > 0 {
		for k := range m.Inputs {
			v := m.Inputs[k]
			baseI := i
			i = encodeVarintMessages(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintMessages(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintMessages(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CountingActor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CountingActor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CountingActor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMessages(dAtA []byte, offset int, v uint64) int {
	offset -= sovMessages(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Event) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMessages(uint64(m.Id))
	}
	if m.Value != 0 {
		n += 1 + sovMessages(uint64(m.Value))
	}
	if m.Type != 0 {
		n += 1 + sovMessages(uint64(m.Type))
	}
	return n
}

func (m *Snapshot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Inputs) > 0 {
		for k, v := range m.Inputs {
			_ = k
			_ = v
			mapEntrySize := 1 + sovMessages(uint64(k)) + 1 + sovMessages(uint64(v))
			n += mapEntrySize + 1 + sovMessages(uint64(mapEntrySize))
		}
	}
	if len(m.Outputs) > 0 {
		for k, v := range m.Outputs {
			_ = k
			_ = v
			mapEntrySize := 1 + sovMessages(uint64(k)) + 1 + sovMessages(uint64(v))
			n += mapEntrySize + 1 + sovMessages(uint64(mapEntrySize))
		}
	}
	if len(m.RawInputs) > 0 {
		for k, v := range m.RawInputs {
			_ = k
			_ = v
			mapEntrySize := 1 + sovMessages(uint64(k)) + 1 + sovMessages(uint64(v))
			n += mapEntrySize + 1 + sovMessages(uint64(mapEntrySize))
		}
	}
	if len(m.RawOutputs) > 0 {
		for k, v := range m.RawOutputs {
			_ = k
			_ = v
			mapEntrySize := 1 + sovMessages(uint64(k)) + 1 + sovMessages(uint64(v))
			n += mapEntrySize + 1 + sovMessages(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *CountingActor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	return n
}

func sovMessages(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMessages(x uint64) (n int) {
	return sovMessages(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Event) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Event{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Snapshot) String() string {
	if this == nil {
		return "nil"
	}
	keysForInputs := make([]int32, 0, len(this.Inputs))
	for k, _ := range this.Inputs {
		keysForInputs = append(keysForInputs, k)
	}
	github_com_gogo_protobuf_sortkeys.Int32s(keysForInputs)
	mapStringForInputs := "map[int32]int64{"
	for _, k := range keysForInputs {
		mapStringForInputs += fmt.Sprintf("%v: %v,", k, this.Inputs[k])
	}
	mapStringForInputs += "}"
	keysForOutputs := make([]int32, 0, len(this.Outputs))
	for k, _ := range this.Outputs {
		keysForOutputs = append(keysForOutputs, k)
	}
	github_com_gogo_protobuf_sortkeys.Int32s(keysForOutputs)
	mapStringForOutputs := "map[int32]int64{"
	for _, k := range keysForOutputs {
		mapStringForOutputs += fmt.Sprintf("%v: %v,", k, this.Outputs[k])
	}
	mapStringForOutputs += "}"
	keysForRawInputs := make([]int32, 0, len(this.RawInputs))
	for k, _ := range this.RawInputs {
		keysForRawInputs = append(keysForRawInputs, k)
	}
	github_com_gogo_protobuf_sortkeys.Int32s(keysForRawInputs)
	mapStringForRawInputs := "map[int32]int64{"
	for _, k := range keysForRawInputs {
		mapStringForRawInputs += fmt.Sprintf("%v: %v,", k, this.RawInputs[k])
	}
	mapStringForRawInputs += "}"
	keysForRawOutputs := make([]int32, 0, len(this.RawOutputs))
	for k, _ := range this.RawOutputs {
		keysForRawOutputs = append(keysForRawOutputs, k)
	}
	github_com_gogo_protobuf_sortkeys.Int32s(keysForRawOutputs)
	mapStringForRawOutputs := "map[int32]int64{"
	for _, k := range keysForRawOutputs {
		mapStringForRawOutputs += fmt.Sprintf("%v: %v,", k, this.RawOutputs[k])
	}
	mapStringForRawOutputs += "}"
	s := strings.Join([]string{`&Snapshot{`,
		`Inputs:` + mapStringForInputs + `,`,
		`Outputs:` + mapStringForOutputs + `,`,
		`RawInputs:` + mapStringForRawInputs + `,`,
		`RawOutputs:` + mapStringForRawOutputs + `,`,
		`}`,
	}, "")
	return s
}
func (this *CountingActor) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CountingActor{`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMessages(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Event) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Event: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Event: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= Event_EventType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Snapshot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Snapshot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Snapshot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inputs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Inputs == nil {
				m.Inputs = make(map[int32]int64)
			}
			var mapkey int32
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessages
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessages
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMessages(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthMessages
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Inputs[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Outputs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Outputs == nil {
				m.Outputs = make(map[int32]int64)
			}
			var mapkey int32
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessages
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessages
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMessages(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthMessages
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Outputs[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawInputs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RawInputs == nil {
				m.RawInputs = make(map[int32]int64)
			}
			var mapkey int32
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessages
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessages
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMessages(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthMessages
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.RawInputs[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawOutputs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RawOutputs == nil {
				m.RawOutputs = make(map[int32]int64)
			}
			var mapkey int32
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessages
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessages
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMessages(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthMessages
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.RawOutputs[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CountingActor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CountingActor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CountingActor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessages(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMessages
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMessages
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMessages
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMessages        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessages          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMessages = fmt.Errorf("proto: unexpected end of group")
)
